import os
import requests
import json
import asyncio
import time
from flask import Blueprint, request

# Import b·ªô n√£o AI
from api.analyze import perform_full_analysis

# --- C·∫•u h√¨nh ---
webhook_blueprint = Blueprint('webhook_blueprint', __name__)
PAGE_ACCESS_TOKEN = os.environ.get('PAGE_ACCESS_TOKEN')
VERIFY_TOKEN = os.environ.get('VERIFY_TOKEN')
CONVERSATION_DELAY = 1.5 # ƒê·ªô tr·ªÖ gi·ªØa c√°c tin nh·∫Øn (t√≠nh b·∫±ng gi√¢y)

# --- Webhook Endpoints ---

@webhook_blueprint.route('/messenger_webhook', methods=['GET'])
def verify_webhook():
    """X√°c th·ª±c webhook v·ªõi Facebook."""
    mode = request.args.get('hub.mode')
    token = request.args.get('hub.verify_token')
    challenge = request.args.get('hub.challenge')
    if mode and token and mode == 'subscribe' and token == VERIFY_TOKEN:
        print("WEBHOOK_VERIFIED")
        return challenge, 200
    return 'VERIFICATION_FAILED', 403

@webhook_blueprint.route('/messenger_webhook', methods=['POST'])
def handle_message():
    """Nh·∫≠n v√† x·ª≠ l√Ω tin nh·∫Øn theo lu·ªìng h·ªôi tho·∫°i t·ª± nhi√™n."""
    try:
        data = request.get_json(force=True)
        if data.get('object') == 'page':
            for entry in data.get('entry', []):
                for messaging_event in entry.get('messaging', []):
                    if messaging_event.get('message'):
                        sender_id = messaging_event['sender']['id']
                        message_text = messaging_event.get('message', {}).get('text')

                        if message_text:
                            print(f'Received message: "{message_text}" from PSID: {sender_id}')
                            
                            analysis_result = asyncio.run(perform_full_analysis(message_text, []))
                            print(f"‚úÖ Analysis result: {json.dumps(analysis_result, ensure_ascii=False)}")

                            # <<< B·∫ÆT ƒê·∫¶U LU·ªíNG H·ªòI THO·∫†I M·ªöI >>>
                            if analysis_result and analysis_result.get('is_dangerous'):
                                # --- Lu·ªìng 1: Tin nh·∫Øn NGUY HI·ªÇM ---
                                
                                # [Tin 1] C·∫£nh b√°o ƒë·∫ßu ti√™n
                                send_message(sender_id, "‚ö†Ô∏è T·ªõ ph√°t hi·ªán tin nh·∫Øn n√†y c√≥ d·∫•u hi·ªáu kh√¥ng an to√†n, c·∫≠u n√™n c·∫©n th·∫≠n nh√©.")
                                time.sleep(CONVERSATION_DELAY)

                                # [Tin 2] L√Ω do
                                reason = analysis_result.get('reason')
                                if reason:
                                    send_message(sender_id, f"üîé C·ª• th·ªÉ l√†: {reason}")
                                    time.sleep(CONVERSATION_DELAY)

                                # [Tin 3] Khuy·∫øn c√°o
                                recommend = analysis_result.get('recommend')
                                if recommend:
                                    send_message(sender_id, f"üí° V√¨ v·∫≠y, t·ªõ g·ª£i √Ω c·∫≠u n√™n: {recommend}")
                            
                            else:
                                # --- Lu·ªìng 2: Tin nh·∫Øn AN TO√ÄN ---
                                send_message(sender_id, "‚úÖ T·ªõ ƒë√£ qu√©t v√† th·∫•y tin nh·∫Øn n√†y an to√†n nh√©.")
                            # <<< K·∫æT TH√öC LU·ªíNG H·ªòI THO·∫†I >>>
                        
    except Exception as e:
        print(f"An error occurred during webhook processing: {e}")
    return 'OK', 200

# --- H√†m g·ª≠i tin nh·∫Øn th√¥ng minh (Gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi) ---

def _send_single_chunk(recipient_id, chunk_text):
    """H√†m ph·ª•: G·ª≠i m·ªôt m·∫©u tin nh·∫Øn duy nh·∫•t."""
    API_URL = 'https://graph.facebook.com/v23.0/me/messages'
    payload = {'recipient': {'id': recipient_id}, 'message': {'text': chunk_text}}
    headers = {'Content-Type': 'application/json'}
    try:
        r = requests.post(API_URL, params={'access_token': PAGE_ACCESS_TOKEN}, json=payload, headers=headers)
        if r.status_code != 200:
            print(f'Error sending chunk: {r.status_code} {r.text}')
            return False
        return True
    except Exception as e:
        print(f"An exception occurred while sending chunk: {e}")
        return False

def send_message(recipient_id, message_text):
    """G·ª≠i tin nh·∫Øn, t·ª± ƒë·ªông chia nh·ªè n·∫øu d√†i h∆°n 2000 k√Ω t·ª±. KH√îNG R√öT G·ªåN."""
    LIMIT = 2000
    if len(message_text) <= LIMIT:
        _send_single_chunk(recipient_id, message_text)
    else:
        print(f"Message is too long ({len(message_text)} chars). Splitting into chunks.")
        chunks = [message_text[i:i + LIMIT] for i in range(0, len(message_text), LIMIT)]
        for i, chunk in enumerate(chunks):
            if not _send_single_chunk(recipient_id, chunk):
                print("Stopping sending subsequent chunks due to an error.")
                break
            time.sleep(1)
    print(f'Finished sending process to {recipient_id}.')
